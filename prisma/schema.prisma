generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Existing Models
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  assets        Asset[]
  donors        Donor[]
  accounts      Account[]
  sessions      Session[]
}

model Asset {
  id           String    @id @default(uuid())
  userId       String
  type         AssetType
  amount       Float?
  grams        Float?
  carat        Int?
  initialValue Float
  currentValue Float?
  dateReceived DateTime
  donorId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  donor        Donor     @relation(fields: [donorId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([donorId])
}

model Donor {
  id          String   @id @default(uuid())
  userId      String
  name        String
  isGroomSide Boolean  @default(false)
  isBrideSide Boolean  @default(false)
  createdAt   DateTime @default(now())
  assets      Asset[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum AssetType {
  CEYREK_ALTIN
  TAM_ALTIN
  RESAT
  BESI_BIR_YERDE
  BILEZIK
  GRAM_GOLD
  TURKISH_LIRA
  DOLLAR
  EURO
}
