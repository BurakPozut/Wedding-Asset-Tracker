generator client {
  provider = "prisma-client-js"
  //output   = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  weddingDate   DateTime?
  accounts      Account[]
  assets        Asset[]
  donors        Donor[]
  sessions      Session[]
}

model Asset {
  id           String        @id @default(uuid())
  userId       String
  grams        Float?
  carat        Int?
  initialValue Float
  dateReceived DateTime
  donorId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  quantity     Int           @default(1)
  assetTypeId  String
  assetType    AssetTypeInfo @relation(fields: [assetTypeId], references: [id])
  donor        Donor         @relation(fields: [donorId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([donorId])
  @@index([assetTypeId])
}

model AssetTypeInfo {
  id           String    @id @default(uuid())
  type         AssetType @unique
  currentValue Float
  lastUpdated  DateTime  @default(now())
  assets       Asset[]
}

model Donor {
  id          String   @id @default(uuid())
  userId      String
  name        String
  isGroomSide Boolean  @default(false)
  isBrideSide Boolean  @default(false)
  createdAt   DateTime @default(now())
  assets      Asset[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model gram_gold_prices {
  id         Int       @id @default(autoincrement())
  price_date DateTime  @unique @db.Date
  bid_price  Decimal   @db.Decimal(10, 4)
  ask_price  Decimal   @db.Decimal(10, 4)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model cey_gold_prices {
  id         Int       @id @default(autoincrement())
  price_date DateTime  @unique @db.Date
  bid_price  Decimal   @db.Decimal(10, 4)
  ask_price  Decimal   @db.Decimal(10, 4)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model usd_exchange_rates {
  id         Int       @id @default(autoincrement())
  price_date DateTime  @unique @db.Date
  bid_price  Decimal   @db.Decimal(10, 4)
  ask_price  Decimal   @db.Decimal(10, 4)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model eur_exchange_rates {
  id         Int       @id @default(autoincrement())
  price_date DateTime  @unique @db.Date
  bid_price  Decimal   @db.Decimal(10, 4)
  ask_price  Decimal   @db.Decimal(10, 4)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

enum AssetType {
  CEYREK_ALTIN
  YARIM_ALTIN
  TAM_ALTIN
  RESAT_ALTIN
  CUMHURIYET_ALTIN
  BESI_BIR_YERDE
  BILEZIK
  GRAM_GOLD
  TURKISH_LIRA
  DOLLAR
  EURO
}
